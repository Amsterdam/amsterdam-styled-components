// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`SearchBarToggle should render 1`] = `
.c3 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  width: 20px;
  height: 20px;
  box-sizing: content-box;
  -webkit-transform: rotate(0deg);
  -ms-transform: rotate(0deg);
  transform: rotate(0deg);
}

.c3 > svg {
  width: inherit;
  height: inherit;
}

.c0 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: flex-start;
  -webkit-box-align: flex-start;
  -ms-flex-align: flex-start;
  align-items: flex-start;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
}

.c0 > .c4 {
  position: absolute;
  top: 50px;
  right: 0;
  left: 0;
  padding: 15px;
  border-bottom: 4px solid;
}

.c1 {
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-text-decoration: none;
  text-decoration: none;
  border: none;
  cursor: pointer;
  font-size: 16px;
  font-weight: normal;
  padding: 0 10px 0 10px;
  -webkit-transition: color 0.1s ease-in-out,background-color 0.1s ease-in-out;
  transition: color 0.1s ease-in-out,background-color 0.1s ease-in-out;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  padding: 5px;
  width: 30px;
  height: 30px;
  height: 50px;
  width: 50px;
}

.c1:focus {
  z-index: 10;
  outline-style: solid;
  outline-offset: 0px;
  outline-width: 3px;
}

.c1:after {
  content: '';
  display: block;
  min-height: inherit;
  font-size: 0;
}

.c1 .c2 {
  height: 20px;
  width: 20px;
}

<SearchBarMenu
  css=""
  onChange={[MockFunction]}
  onSubmit={[MockFunction]}
  placeholder="Search..."
>
  <styled.div
    css=""
    onBlur={[Function]}
    onClick={[Function]}
    onKeyDown={[Function]}
    open={false}
  >
    <StyledComponent
      css=""
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-brqgnP",
            "isStatic": false,
            "lastClassName": "c0",
            "rules": Array [
              "
  display: flex;
  align-items: flex-start;
  flex-direction: column;

  & > ",
              ".c4",
              " {
    position: absolute;
    top: 50px;
    right: 0;
    left: 0;
    padding: 15px;
    background-color: ",
              [Function],
              ";
    border-bottom: 4px solid;
  }

  ",
              [Function],
              "
  ",
              [Function],
              "
",
            ],
          },
          "displayName": "styled.div",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-brqgnP",
          "target": "div",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={
        Object {
          "current": .c3 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  width: 20px;
  height: 20px;
  box-sizing: content-box;
  -webkit-transform: rotate(0deg);
  -ms-transform: rotate(0deg);
  transform: rotate(0deg);
}

.c3 > svg {
  width: inherit;
  height: inherit;
}

.c0 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: flex-start;
  -webkit-box-align: flex-start;
  -ms-flex-align: flex-start;
  align-items: flex-start;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
}

.c0 > .c4 {
  position: absolute;
  top: 50px;
  right: 0;
  left: 0;
  padding: 15px;
  border-bottom: 4px solid;
}

.c1 {
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-text-decoration: none;
  text-decoration: none;
  border: none;
  cursor: pointer;
  font-size: 16px;
  font-weight: normal;
  padding: 0 10px 0 10px;
  -webkit-transition: color 0.1s ease-in-out,background-color 0.1s ease-in-out;
  transition: color 0.1s ease-in-out,background-color 0.1s ease-in-out;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  padding: 5px;
  width: 30px;
  height: 30px;
  height: 50px;
  width: 50px;
}

.c1:focus {
  z-index: 10;
  outline-style: solid;
  outline-offset: 0px;
  outline-width: 3px;
}

.c1:after {
  content: '';
  display: block;
  min-height: inherit;
  font-size: 0;
}

.c1 .c2 {
  height: 20px;
  width: 20px;
}

<div
            class="c0"
          >
            <button
              aria-label="Search"
              class="c1"
              type="button"
            >
              <span
                class="c2 c3"
              >
                <svg
                  focusable="false"
                  viewBox="0 0 32 32"
                >
                  <path
                    d="M32 29.119l-9.825-9.825a12.217 12.217 0 1 0-2.88 2.881L29.118 32 32 29.119zm-19.771-8.746a8.145 8.145 0 1 1 0-16.289 8.145 8.145 0 0 1 0 16.29z"
                    fill="#000"
                    fill-rule="evenodd"
                  />
                </svg>
              </span>
            </button>
          </div>,
        }
      }
      onBlur={[Function]}
      onClick={[Function]}
      onKeyDown={[Function]}
      open={false}
    >
      <div
        className="c0"
        onBlur={[Function]}
        onClick={[Function]}
        onKeyDown={[Function]}
        open={false}
      >
        <Styled(Styled(styled.button))
          aria-label="Search"
          iconSize={20}
          onClick={[Function]}
          open={false}
          type="button"
        >
          <StyledComponent
            aria-label="Search"
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-cMljjf",
                  "isStatic": false,
                  "lastClassName": "c1",
                  "rules": Array [
                    "
  display: inline-flex;
  align-items: center;
  text-decoration: none;
  border: none;
  cursor: pointer;
  font-size: 16px;
  font-weight: normal;
  padding: 0 10px 0 10px;
  ",
                    [Function],
                    "
  ",
                    "transition: color 0.1s ease-in-out, background-color 0.1s ease-in-out;",
                    "
  background: ",
                    [Function],
                    ";

  &:hover {
    background: ",
                    [Function],
                    ";
  }

  ",
                    "
  &:after {
    content: '';
    display: block;
    min-height: inherit;
    font-size: 0;
  }
",
                    "
",
                    "
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 5px;
  ",
                    [Function],
                    "

  ",
                    ".c2",
                    " {
    ",
                    [Function],
                    "
  }
",
                    "
  height: ",
                    [Function],
                    ";
  width: ",
                    [Function],
                    ";
  background-color: ",
                    [Function],
                    ";
",
                  ],
                },
                "displayName": "Styled(Styled(styled.button))",
                "foldedComponentIds": Array [
                  "sc-bdVaJa",
                  "sc-htpNat",
                ],
                "render": [Function],
                "styledComponentId": "sc-cMljjf",
                "target": "button",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            iconSize={20}
            onClick={[Function]}
            open={false}
            type="button"
          >
            <button
              aria-label="Search"
              className="c1"
              onClick={[Function]}
              open={false}
              type="button"
            >
              <Icon>
                <styled.span>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "c2",
                          "isStatic": false,
                          "lastClassName": "c3",
                          "rules": Array [
                            "
  display: ",
                            [Function],
                            ";
  ",
                            [Function],
                            "
  ",
                            [Function],
                            "
  ",
                            [Function],
                            ";
  box-sizing: content-box;
  ",
                            [Function],
                            ";

  & > svg {
    width: inherit;
    height: inherit;
    ",
                            [Function],
                            ";
  }
",
                          ],
                        },
                        "displayName": "styled.span",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "c2",
                        "target": "span",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <span
                      className="c2 c3"
                    >
                      <SvgSearch>
                        <svg
                          focusable={false}
                          viewBox="0 0 32 32"
                        >
                          <path
                            d="M32 29.119l-9.825-9.825a12.217 12.217 0 1 0-2.88 2.881L29.118 32 32 29.119zm-19.771-8.746a8.145 8.145 0 1 1 0-16.289 8.145 8.145 0 0 1 0 16.29z"
                            fill="#000"
                            fillRule="evenodd"
                          />
                        </svg>
                      </SvgSearch>
                    </span>
                  </StyledComponent>
                </styled.span>
              </Icon>
            </button>
          </StyledComponent>
        </Styled(Styled(styled.button))>
      </div>
    </StyledComponent>
  </styled.div>
</SearchBarMenu>
`;
